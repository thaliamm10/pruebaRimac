{"version":3,"file":"static/js/92.51d6653e.chunk.js","mappings":"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","sources":["core/states/plans/PlansActions.ts","core/services/PlansRService.ts","views/pages/auth/login/Login.tsx","views/pages/auth/Auth.tsx"],"sourcesContent":["export const ADD_DATA = 'ADD_DATA';\r\n\r\nexport const addData = (newData: any) => ({\r\n    type: ADD_DATA,\r\n    payload: newData,\r\n});\r\n","// DataService.ts\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addData } from '../states/plans/PlansActions';\r\n\r\ntype Data = {\r\n    documento: '',\r\n    telefono: '',\r\n    terminos1: false,\r\n    terminos2: false,\r\n};\r\n\r\nconst usePlansService = () => {\r\n    const dispatch = useDispatch();\r\n    // @ts-ignore\r\n    const data = useSelector((state) => state.data.data);\r\n\r\n    const addDataToRedux = (newData: Data) => {\r\n        dispatch(addData(newData));\r\n    };\r\n\r\n    const showData = () => {\r\n        console.log(data);\r\n    };\r\n\r\n    return { addDataToRedux, showData };\r\n};\r\n\r\nexport default usePlansService;\r\n","import React, {useState} from 'react';\r\nimport { useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Card, Row, Form} from \"react-bootstrap\";\r\nimport usePlansService  from \"../../../../core/services/PlansRService\";\r\n\r\n\r\nconst Login =  () => {\r\n     const { addDataToRedux } = usePlansService();\r\n\r\n    const [load, setLoad] = useState(false);\r\n    const initialValues = {\r\n        documento: '',\r\n        telefono: '',\r\n        terminos1: false,\r\n        terminos2: false,\r\n\r\n    };\r\n    const validationSchema = Yup.object({\r\n        documento: Yup.string()\r\n            .required('El documento es obligatorio')\r\n            .matches(/^[0-9]+$/, 'El documento debe contener solo números')\r\n            .min(8, 'El documento debe tener 8 caracteres'),\r\n        telefono: Yup.string()\r\n            .required('El teléfono es obligatorio')\r\n            .matches(/^[0-9]+$/, 'El teléfono debe contener solo números')\r\n            .min(11, 'El teléfono debe tener 11 caracteres'),\r\n        terminos1: Yup.boolean()\r\n            .oneOf([true], 'Debe aceptar los términos de Política de Privacidad '),\r\n        terminos2: Yup.boolean()\r\n            .oneOf([true], 'Debe aceptar los términos de Política Comunicaciones Comerciales'),\r\n    });\r\n    const getValidationClass = (touched: boolean | undefined, error: string | undefined) => (touched && error ? 'is-invalid' : '');\r\n\r\n    const handleSubmit = (values: any) => {\r\n        console.log('hola')\r\n        // Lógica para manejar la subida del formulario\r\n        console.log(values);\r\n        handleAddData(values)\r\n    };\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: initialValues,\r\n        validationSchema: validationSchema,\r\n        onSubmit: values => {\r\n            setLoad(true);\r\n            handleSubmit({\r\n                ...values\r\n            });\r\n        },\r\n    });\r\n\r\n\r\n    /**\r\n     * Agrega datos\r\n     */\r\n    const handleAddData = (row:any) => {\r\n        const newData = {\r\n         ...row\r\n        };\r\n        addDataToRedux(newData);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={'frame1000004351'}>\r\n            <div className={'frame1000004368'}>\r\n                <span className={'tag-promo'}>Seguro Salud Flexible</span>\r\n                <p className={'txtF'}>Creado para ti y tu familia</p>\r\n                <p className={'subtitle-14'}>Tú eliges cuánto pagar. Ingresa tus datos, cotiza y recibe nuestra\r\n                    asesoría. 100% online.</p>\r\n            </div>\r\n            <Row>\r\n                <Card.Body>\r\n                    <form>\r\n                        {/*<div className={'frame1000004290'}>*/}\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6\">\r\n\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12 mb-2\">\r\n                                        <Form.Group controlId=\"documento\">\r\n                                            <Form.Label>Documento:</Form.Label>\r\n                                            <Form.Control\r\n                                                type=\"text\"\r\n                                                name=\"documento\"\r\n                                                onChange={formik.handleChange}\r\n                                                onBlur={formik.handleBlur}\r\n                                                value={formik.values.documento}\r\n                                                maxLength={8}\r\n                                                className={getValidationClass(formik.touched.documento, formik.errors.documento)}\r\n                                            />\r\n                                            {formik.touched.documento && formik.errors.documento && (\r\n                                                <Form.Control.Feedback\r\n                                                    type=\"invalid\">{formik.errors.documento}</Form.Control.Feedback>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <Form.Group controlId=\"telefono\">\r\n                                            <Form.Label>Teléfono:</Form.Label>\r\n                                            <Form.Control\r\n                                                type=\"text\"\r\n                                                name=\"telefono\"\r\n                                                onChange={formik.handleChange}\r\n                                                onBlur={formik.handleBlur}\r\n                                                value={formik.values.telefono}\r\n                                                maxLength={11}\r\n                                                className={getValidationClass(formik.touched.telefono, formik.errors.telefono)}\r\n                                            />\r\n                                            {formik.touched.telefono && formik.errors.telefono && (\r\n                                                <Form.Control.Feedback\r\n                                                    type=\"invalid\">{formik.errors.telefono}</Form.Control.Feedback>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    <br/>\r\n\r\n                                    <div className=\"col-12\">\r\n                                        <Form.Group controlId=\"terminos1\">\r\n                                            <Form.Check\r\n                                                type=\"checkbox\"\r\n                                                name=\"terminos1\"\r\n                                                label=\"Acepto la Política de Privacidad\"\r\n                                                onChange={formik.handleChange}\r\n                                                onBlur={formik.handleBlur}\r\n                                                checked={formik.values.terminos1}\r\n                                                className={getValidationClass(formik.touched.terminos1, formik.errors.terminos1)}\r\n                                            />\r\n                                            {formik.touched.terminos1 && formik.errors.terminos1 && (\r\n                                                <div\r\n                                                    className=\"invalid-feedback d-block\">{formik.errors.terminos1}</div>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <Form.Group controlId=\"terminos2\">\r\n                                            <Form.Check\r\n                                                type=\"checkbox\"\r\n                                                name=\"terminos2\"\r\n                                                label=\"Acepto la Política Comunicaciones Comerciales\"\r\n                                                onChange={formik.handleChange}\r\n                                                onBlur={formik.handleBlur}\r\n                                                checked={formik.values.terminos2}\r\n                                                className={getValidationClass(formik.touched.terminos2, formik.errors.terminos2)}\r\n                                            />\r\n                                            {formik.touched.terminos2 && formik.errors.terminos2 && (\r\n                                                <div\r\n                                                    className=\"invalid-feedback d-block\">{formik.errors.terminos2}</div>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    </div>\r\n\r\n                                    <label>Aplican Términos y Condiciones.</label>\r\n\r\n                                    <div>\r\n                                        {load ? (<button type=\"button\"\r\n                                                         disabled={true}\r\n                                                         className={'btn-cotiza'}\r\n\r\n                                        >Un momento por favor...\r\n                                        </button>) : (\r\n                                            <button\r\n                                                type=\"submit\"\r\n                                                className={'btn-cotiza'}\r\n                                                onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n                                                    e.preventDefault();\r\n                                                    // @ts-ignore\r\n                                                    formik.handleSubmit(e);\r\n                                                }}\r\n                                            >\r\n                                                Cotiza aquí\r\n                                            </button>\r\n                                        )}\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {/*</div>*/}\r\n                    </form>\r\n                </Card.Body>\r\n            </Row>\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport imgLogo from \"../../../assets/images/image 220.png\";\r\nimport Login from \"./login/Login\";\r\n\r\nconst Auth = () => {\r\n    return (\r\n        <>\r\n            <div\r\n                className={'left-image blur-asset'}\r\n            />\r\n            {/*<div*/}\r\n            {/*    className={'right-image'}*/}\r\n            {/*/>*/}\r\n\r\n            <div className={'frame1000004308'}>\r\n                <img src={imgLogo} className={'frame1000004298'} alt=\"Logo\"/>\r\n                <img src={imgLogo} className={'frame1000004299'} alt=\"Logo\"/>\r\n            </div>\r\n\r\n\r\n            <div className={'frame1000004351'}>\r\n                <Login/>\r\n            </div>\r\n\r\n\r\n\r\n\r\n        </>\r\n\r\n\r\n    );\r\n};\r\n\r\nexport default Auth;\r\n"],"names":["usePlansService","dispatch","useDispatch","data","useSelector","state","addDataToRedux","newData","type","payload","addData","showData","console","log","Login","load","setLoad","useState","validationSchema","Yup","documento","required","matches","min","telefono","terminos1","oneOf","terminos2","getValidationClass","touched","error","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","handleAddData","handleSubmit","row","_jsxs","className","children","_jsx","Row","Card","Body","Form","Group","controlId","Label","Control","name","onChange","handleChange","onBlur","handleBlur","value","maxLength","errors","Feedback","Check","label","checked","disabled","onClick","e","preventDefault","Auth","_Fragment","src","imgLogo","alt"],"sourceRoot":""}