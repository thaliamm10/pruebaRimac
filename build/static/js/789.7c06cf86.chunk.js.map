{"version":3,"file":"static/js/789.7c06cf86.chunk.js","mappings":"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","sources":["core/hooks/services/PlansRService.ts","common/constants/Auth.constant.ts","views/pages/auth/login/Login.tsx","views/pages/auth/Auth.tsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\r\nimport { addData } from '../../states/plans/PlansActions';\r\ntype Data = {\r\n    documento: '',\r\n    telefono: '',\r\n    terminos1: false,\r\n    terminos2: false,\r\n};\r\n\r\nconst usePlansService = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    // @ts-ignore\r\n    const data = useSelector((state) => state.data.data);\r\n\r\n    const addDataToRedux = (newData: Data) => {\r\n        dispatch(addData(newData));\r\n\r\n    };\r\n\r\n    const showData = () => {\r\n        console.log(data);\r\n    };\r\n\r\n    return { addDataToRedux, showData };\r\n};\r\n\r\nexport default usePlansService;\r\n","export const CAMPO_OBLIGATORIO='El campo es obligatorio';\r\nexport const CAMPO_NUMERICO='El campo debe contener solo números';\r\nexport const CAMPO_CANTIDAD_CARACTERES='El campo debe tener';\r\nexport const CAMPO_POLITICA_PRIVACIDAD='Debe aceptar los términos de Política de Privacidad';\r\nexport const CAMPO_POLITICA_COMERCIAL='Debe aceptar los términos de Política Comunicaciones Comerciales';\r\n","import React, {startTransition, useState} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Card, Row, Form} from \"react-bootstrap\";\r\nimport usePlansService from \"../../../../core/hooks/services/PlansRService\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {\r\n    CAMPO_CANTIDAD_CARACTERES,\r\n    CAMPO_NUMERICO,\r\n    CAMPO_OBLIGATORIO, CAMPO_POLITICA_COMERCIAL,\r\n    CAMPO_POLITICA_PRIVACIDAD\r\n} from \"../../../../common/constants/Auth.constant\";\r\nimport './Login.css'\r\n\r\nconst Login = () => {\r\n    const navigate = useNavigate();\r\n    const {addDataToRedux} = usePlansService();\r\n    const [load, setLoad] = useState(false);\r\n    // Inicialización de campos\r\n    const initialValues = {\r\n        documento: '',\r\n        telefono: '',\r\n        terminos1: false,\r\n        terminos2: false,\r\n\r\n    };\r\n    // Validación de campos\r\n    const validationSchema =\r\n        Yup.object({\r\n            documento: Yup.string()\r\n                .required(CAMPO_OBLIGATORIO)\r\n                .matches(/^[0-9]+$/, CAMPO_NUMERICO)\r\n                .min(8, ` ${CAMPO_CANTIDAD_CARACTERES} 8 dígitos`),\r\n            telefono: Yup.string()\r\n                .required(CAMPO_OBLIGATORIO)\r\n                .matches(/^[0-9]+$/, CAMPO_NUMERICO)\r\n                .min(11, ` ${CAMPO_CANTIDAD_CARACTERES} 11 dígitos`),\r\n            terminos1: Yup.boolean()\r\n                .oneOf([true], CAMPO_POLITICA_PRIVACIDAD),\r\n            terminos2: Yup.boolean()\r\n                .oneOf([true], CAMPO_POLITICA_COMERCIAL),\r\n        });\r\n\r\n    // Cambia clase de Estilos de campos según validación\r\n    const getValidationClass = (touched: boolean | undefined, error: string | undefined) => (touched && error ? 'is-invalid' : '');\r\n\r\n    // Metodo para guardar campos\r\n    const handleSubmit = (values: any) => {\r\n        handleAddData(values)\r\n    };\r\n    const handleAddData = (row: any) => {\r\n        setLoad(true);\r\n        const newData = {\r\n            ...row\r\n        };\r\n\r\n        try {\r\n            startTransition(() => {\r\n                addDataToRedux(newData);\r\n                setLoad(false);\r\n                navigate(\"/plans\");\r\n            });\r\n        } catch (error) {\r\n            navigate(\"/error\", {state: {message: \"Error\"}});\r\n        }\r\n    };\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: initialValues,\r\n        validationSchema: validationSchema,\r\n        onSubmit: values => {\r\n            handleSubmit({\r\n                ...values\r\n            });\r\n        },\r\n    });\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={'frame1000004368'}>\r\n                <span className={'tag-promo'}>Seguro Salud Flexible</span>\r\n                <p className={'txtF'}>Creado para ti y tu familia</p>\r\n                <p className={'subtitle-14'}>Tú eliges cuánto pagar. Ingresa tus datos, cotiza y recibe nuestra\r\n                    asesoría. 100% online.</p>\r\n            </div>\r\n            <Row>\r\n                <Card.Body>\r\n                    <form>\r\n                        {/*<div className={'frame1000004290'}>*/}\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12 mb-2\">\r\n                                        <Form.Group controlId=\"documento\">\r\n                                            <Form.Label>Documento:</Form.Label>\r\n                                            <Form.Control\r\n                                                type=\"text\"\r\n                                                name=\"documento\"\r\n                                                onChange={formik.handleChange}\r\n                                                onBlur={formik.handleBlur}\r\n                                                value={formik.values.documento}\r\n                                                maxLength={8}\r\n                                                className={getValidationClass(formik.touched.documento, formik.errors.documento)}\r\n                                            />\r\n                                            {formik.touched.documento && formik.errors.documento && (\r\n                                                <Form.Control.Feedback\r\n                                                    type=\"invalid\">{formik.errors.documento}</Form.Control.Feedback>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <Form.Group controlId=\"telefono\">\r\n                                            <Form.Label>Teléfono:</Form.Label>\r\n                                            <Form.Control\r\n                                                type=\"text\"\r\n                                                name=\"telefono\"\r\n                                                onChange={formik.handleChange}\r\n                                                onBlur={formik.handleBlur}\r\n                                                value={formik.values.telefono}\r\n                                                maxLength={11}\r\n                                                className={getValidationClass(formik.touched.telefono, formik.errors.telefono)}\r\n                                            />\r\n                                            {formik.touched.telefono && formik.errors.telefono && (\r\n                                                <Form.Control.Feedback\r\n                                                    type=\"invalid\">{formik.errors.telefono}</Form.Control.Feedback>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    <br/>\r\n\r\n                                    <div className=\"col-12\">\r\n                                        <Form.Group controlId=\"terminos1\">\r\n                                            <Form.Check\r\n                                                type=\"checkbox\"\r\n                                                name=\"terminos1\"\r\n                                                label=\"Acepto la Política de Privacidad\"\r\n                                                onChange={formik.handleChange}\r\n                                                onBlur={formik.handleBlur}\r\n                                                checked={formik.values.terminos1}\r\n                                                className={getValidationClass(formik.touched.terminos1, formik.errors.terminos1)}\r\n                                            />\r\n                                            {formik.touched.terminos1 && formik.errors.terminos1 && (\r\n                                                <div\r\n                                                    className=\"invalid-feedback d-block\">{formik.errors.terminos1}</div>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <Form.Group controlId=\"terminos2\">\r\n                                            <Form.Check\r\n                                                type=\"checkbox\"\r\n                                                name=\"terminos2\"\r\n                                                label=\"Acepto la Política Comunicaciones Comerciales\"\r\n                                                onChange={formik.handleChange}\r\n                                                onBlur={formik.handleBlur}\r\n                                                checked={formik.values.terminos2}\r\n                                                className={getValidationClass(formik.touched.terminos2, formik.errors.terminos2)}\r\n                                            />\r\n                                            {formik.touched.terminos2 && formik.errors.terminos2 && (\r\n                                                <div\r\n                                                    className=\"invalid-feedback d-block\">{formik.errors.terminos2}</div>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    </div>\r\n\r\n                                    <label>Aplican Términos y Condiciones.</label>\r\n\r\n                                    <div>\r\n                                        {load ? (<button type=\"button\"\r\n                                                         disabled={true}\r\n                                                         className={'btn-cotiza'}\r\n\r\n                                        >Un momento por favor...\r\n                                        </button>) : (\r\n                                            <button\r\n                                                type=\"submit\"\r\n                                                className={'btn-cotiza'}\r\n                                                onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n                                                    e.preventDefault();\r\n                                                    // @ts-ignore\r\n                                                    formik.handleSubmit(e);\r\n                                                }}\r\n                                            >\r\n                                                Cotiza aquí\r\n                                            </button>\r\n                                        )}\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {/*</div>*/}\r\n                    </form>\r\n                </Card.Body>\r\n            </Row>\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport imgLogo from \"../../../assets/images/image 220.png\";\r\nimport Login from \"./login/Login\";\r\nimport './Auth.css'\r\nimport {Row} from \"react-bootstrap\";\r\n\r\nconst Auth = () => {\r\n    return (\r\n        <>\r\n            {/*Imagenes de fondo*/}\r\n            <div className={'left-image'}/>\r\n            <div className={'right-image'}/>\r\n\r\n\r\n            <div className={'row'}>\r\n                <div className={'col-lg-8 col-md-12 col-sm-12 section1'}>\r\n                    <img src={imgLogo} className={'section1__img img-fluid'} alt=\"Logo\" />\r\n                    <img src={imgLogo} className={'section1__img img-fluid'} alt=\"Logo\"  />\r\n                </div>\r\n\r\n                <div className={'col-lg-4 col-md-12 col-sm-12 section2'}>\r\n                    <Login/>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n            {/*Secciones de contenido*/}\r\n            {/*<div className={'section1'}>*/}\r\n            {/*    <img src={imgLogo} className={'section1__img'} alt=\"Logo\"/>*/}\r\n            {/*    <img src={imgLogo} className={'section1__img'} alt=\"Logo\"/>*/}\r\n            {/*</div>*/}\r\n            {/*<div className={'section2'}>*/}\r\n            {/*    <Login/>*/}\r\n            {/*</div>*/}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Auth;\r\n"],"names":["usePlansService","dispatch","useDispatch","data","useSelector","state","addDataToRedux","newData","addData","showData","console","log","CAMPO_OBLIGATORIO","CAMPO_NUMERICO","CAMPO_CANTIDAD_CARACTERES","Login","navigate","useNavigate","load","setLoad","useState","validationSchema","Yup","documento","required","matches","min","concat","telefono","terminos1","oneOf","terminos2","getValidationClass","touched","error","handleAddData","row","startTransition","message","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","handleSubmit","_jsxs","children","className","_jsx","Row","Card","Body","Form","Group","controlId","Label","Control","type","name","onChange","handleChange","onBlur","handleBlur","value","maxLength","errors","Feedback","Check","label","checked","disabled","onClick","e","preventDefault","Auth","_Fragment","src","imgLogo","alt"],"sourceRoot":""}