{"version":3,"file":"static/js/547.771104f6.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-bootstrap/esm/InputGroupText.js","../node_modules/react-bootstrap/esm/InputGroup.js","core/services/PlansRService.ts","common/constants/Auth.constant.ts","views/pages/auth/login/Login.tsx","views/pages/auth/Auth.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nInputGroupText.displayName = 'InputGroupText';\nexport default InputGroupText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport InputGroupText from './InputGroupText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});","import {useDispatch, useSelector} from 'react-redux';\r\nimport {addData} from '../states/plans/PlansActions';\r\n\r\ntype Data = {\r\n    tipoDocumento: '',\r\n    documento: '',\r\n    telefono: '',\r\n    terminos1: false,\r\n    terminos2: false,\r\n};\r\n\r\nconst usePlansService = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    // @ts-ignore\r\n    // const data = useSelector((state) => state.data.data);\r\n\r\n    const addDataToRedux = (newData: Data) => {\r\n        dispatch(addData(newData));\r\n\r\n    };\r\n\r\n    // const showData = () => {\r\n    //     console.log(data);\r\n    // };\r\n\r\n    return {addDataToRedux};\r\n};\r\n\r\nexport default usePlansService;\r\n","export const CAMPO_OBLIGATORIO='El campo es obligatorio';\r\nexport const CAMPO_NUMERICO='El campo debe contener solo números';\r\nexport const CAMPO_CANTIDAD_CARACTERES='El campo debe tener';\r\nexport const CAMPO_POLITICA_PRIVACIDAD='Debe aceptar los términos de Política de Privacidad';\r\nexport const CAMPO_POLITICA_COMERCIAL='Debe aceptar los términos de Política Comunicaciones Comerciales';\r\n","import React, {startTransition, useState} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Card, Form, InputGroup} from \"react-bootstrap\";\r\nimport usePlansService from \"../../../../core/services/PlansRService\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {\r\n    CAMPO_CANTIDAD_CARACTERES,\r\n    CAMPO_NUMERICO,\r\n    CAMPO_OBLIGATORIO, CAMPO_POLITICA_COMERCIAL,\r\n    CAMPO_POLITICA_PRIVACIDAD\r\n} from \"../../../../common/constants/Auth.constant\";\r\nimport './Login.css'\r\n\r\nconst Login = () => {\r\n    const navigate = useNavigate();\r\n    const {addDataToRedux} = usePlansService();\r\n    const [load, setLoad] = useState(false);\r\n    // Inicialización de campos\r\n    const initialValues = {\r\n        tipoDocumento:'DNI',\r\n        documento: '',\r\n        telefono: '',\r\n        terminos1: false,\r\n        terminos2: false,\r\n\r\n    };\r\n    // Validación de campos\r\n    const validationSchema =\r\n        Yup.object({\r\n            documento: Yup.string()\r\n                .required(CAMPO_OBLIGATORIO)\r\n                .matches(/^[0-9]+$/, CAMPO_NUMERICO)\r\n                .min(8, ` ${CAMPO_CANTIDAD_CARACTERES} 8 dígitos`),\r\n            telefono: Yup.string()\r\n                .required(CAMPO_OBLIGATORIO)\r\n                .matches(/^[0-9]+$/, CAMPO_NUMERICO)\r\n                .min(9, ` ${CAMPO_CANTIDAD_CARACTERES} 9 dígitos`),\r\n            terminos1: Yup.boolean()\r\n                .oneOf([true], CAMPO_POLITICA_PRIVACIDAD),\r\n            terminos2: Yup.boolean()\r\n                .oneOf([true], CAMPO_POLITICA_COMERCIAL),\r\n        });\r\n\r\n    // Cambia clase de Estilos de campos según validación\r\n    const getValidationClass = (touched: boolean | undefined, error: string | undefined) => (touched && error ? 'is-invalid' : '');\r\n\r\n    // Metodo para guardar campos\r\n    const handleSubmit = (values: any) => {\r\n        setLoad(true);\r\n        const newData = {\r\n            ...values\r\n        };\r\n\r\n        try {\r\n            startTransition(() => {\r\n                addDataToRedux(newData);\r\n                setLoad(false);\r\n                navigate(\"/plans\");\r\n            });\r\n        } catch (error) {\r\n            navigate(\"/error\", {state: {message: \"Error\"}});\r\n        }\r\n    };\r\n\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: initialValues,\r\n        validationSchema: validationSchema,\r\n        onSubmit: values => {\r\n            handleSubmit({\r\n                ...values\r\n            });\r\n        },\r\n    });\r\n\r\n\r\n    return (\r\n        <div className={''}>\r\n            <Card.Body>\r\n                <form>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <div className=\"row\">\r\n                                <div className={'lsection1 col-12'}>\r\n                                    {/*Documento*/}\r\n                                    <div className=\"col-12 mb-2\">\r\n                                        <Form.Group controlId=\"documento\">\r\n                                            <InputGroup>\r\n                                                <Form.Select\r\n                                                    as=\"select\"\r\n                                                    name=\"tipoDocumento\"\r\n                                                    onChange={formik.handleChange}\r\n                                                    onBlur={formik.handleBlur}\r\n                                                    value={formik.values.tipoDocumento}\r\n                                                    className={getValidationClass(formik.touched.tipoDocumento, formik.errors.tipoDocumento)}\r\n                                                >\r\n                                                    <option value=\"DNI\">DNI</option>\r\n                                                    <option value=\"Pasaporte\">PASAPORTE</option>\r\n                                                </Form.Select>\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    name=\"documento\"\r\n                                                    onChange={formik.handleChange}\r\n                                                    onBlur={formik.handleBlur}\r\n                                                    value={formik.values.documento}\r\n                                                    maxLength={8} // Ajustar la longitud máxima según sea necesario\r\n                                                    className={getValidationClass(formik.touched.documento, formik.errors.documento)}\r\n                                                />\r\n                                            </InputGroup>\r\n                                            {(formik.touched.tipoDocumento || formik.touched.documento) && (formik.errors.tipoDocumento || formik.errors.documento) && (\r\n                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                    {formik.errors.tipoDocumento || formik.errors.documento}\r\n                                                </Form.Control.Feedback>\r\n                                            )}\r\n                                        </Form.Group>\r\n\r\n                                    </div>\r\n                                    {/*Celular*/}\r\n                                    <div className=\"col-12\">\r\n                                        <Form.Group controlId=\"telefono\">\r\n                                            <Form.Control\r\n                                                type=\"text\"\r\n                                                name=\"telefono\"\r\n                                                onChange={formik.handleChange}\r\n                                                onBlur={formik.handleBlur}\r\n                                                value={formik.values.telefono}\r\n                                                maxLength={9}\r\n                                                placeholder={'Celular'}\r\n                                                className={getValidationClass(formik.touched.telefono, formik.errors.telefono)}\r\n                                            />\r\n                                            {formik.touched.telefono && formik.errors.telefono && (\r\n                                                <Form.Control.Feedback\r\n                                                    type=\"invalid\">{formik.errors.telefono}</Form.Control.Feedback>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                </div>\r\n                                <div className={'lsection2 col-12'}>\r\n                                    {/*Terminos privacidad*/}\r\n                                    <div className=\"col-12\">\r\n                                        <Form.Group controlId=\"terminos1\">\r\n                                            <Form.Check\r\n                                                type=\"checkbox\"\r\n                                                name=\"terminos1\"\r\n                                                label=\"Acepto la Política de Privacidad\"\r\n                                                onChange={formik.handleChange}\r\n                                                onBlur={formik.handleBlur}\r\n                                                checked={formik.values.terminos1}\r\n                                                className={getValidationClass(formik.touched.terminos1, formik.errors.terminos1)}\r\n                                            />\r\n                                            {formik.touched.terminos1 && formik.errors.terminos1 && (\r\n                                                <div\r\n                                                    className=\"invalid-feedback d-block\">{formik.errors.terminos1}</div>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                    {/*Terminos comerciales*/}\r\n                                    <div className=\"col-12\">\r\n                                        <Form.Group controlId=\"terminos2\">\r\n                                            <Form.Check\r\n                                                type=\"checkbox\"\r\n                                                name=\"terminos2\"\r\n                                                label=\"Acepto la Política Comunicaciones Comerciales\"\r\n                                                onChange={formik.handleChange}\r\n                                                onBlur={formik.handleBlur}\r\n                                                checked={formik.values.terminos2}\r\n                                                className={getValidationClass(formik.touched.terminos2, formik.errors.terminos2)}\r\n                                            />\r\n                                            {formik.touched.terminos2 && formik.errors.terminos2 && (\r\n                                                <div\r\n                                                    className=\"invalid-feedback d-block\">{formik.errors.terminos2}</div>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    </div>\r\n\r\n                                    <span className={'lsection2__span'}>Aplican Términos y Condiciones.</span>\r\n                                </div>\r\n\r\n\r\n                                <div>\r\n                                    {load ? (<button type=\"button\"\r\n                                                     disabled={true}\r\n                                                     className={'btn-cotiza'}\r\n\r\n                                    >Un momento por favor...\r\n                                    </button>) : (\r\n                                        <button\r\n                                            type=\"submit\"\r\n                                            className={'btn-cotiza'}\r\n                                            onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n                                                e.preventDefault();\r\n                                                // @ts-ignore\r\n                                                formik.handleSubmit(e);\r\n                                            }}\r\n                                        >\r\n                                            Cotiza aquí\r\n                                        </button>\r\n                                    )}\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {/*</div>*/}\r\n                </form>\r\n            </Card.Body>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport imgLogo from \"../../../assets/images/image 220.png\";\r\nimport Login from \"./login/Login\";\r\nimport './Auth.css'\r\nimport {Row} from \"react-bootstrap\";\r\n\r\nconst Auth = () => {\r\n    return (\r\n        <>\r\n            {/*Imagenes de fondo*/}\r\n            <div className={'left-image'}/>\r\n            <div className={'right-image'}/>\r\n\r\n            <div className={'row'}>\r\n                <div className={'col-lg-8 col-md-6 col-sm-12 col-12 section1'}>\r\n                    <img src={imgLogo} className={'section1__img img-fluid'} alt=\"Logo\"/>\r\n                    <img src={imgLogo} className={'section1__img img-fluid hidden'} alt=\"Logo\"/>\r\n                </div>\r\n\r\n                <div className={'col-lg-4 col-md-6 col-sm-12 col-12 section2'}>\r\n                    <div className={'section2__content'}>\r\n                        <span className={'section2__content__tag'}>Seguro Salud Flexible</span>\r\n                        <p className={'section2__content__txt1'}>Creado para ti y tu familia</p>\r\n                        <p className={'section2__content__txt2'}>Tú eliges cuánto pagar. Ingresa tus datos, cotiza y recibe nuestra\r\n                            asesoría. 100% online.</p>\r\n\r\n                    </div>\r\n                    <Login/>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Auth;\r\n"],"names":["context","React","displayName","InputGroupText","_ref","ref","className","bsPrefix","as","Component","props","useBootstrapPrefix","_jsx","classNames","InputGroup","size","hasValidation","contextValue","useMemo","InputGroupContext","Provider","value","children","concat","Object","assign","Text","Radio","FormCheckInput","type","Checkbox","usePlansService","dispatch","useDispatch","addDataToRedux","newData","addData","CAMPO_OBLIGATORIO","CAMPO_NUMERICO","CAMPO_CANTIDAD_CARACTERES","Login","navigate","useNavigate","load","setLoad","useState","validationSchema","Yup","documento","required","matches","min","telefono","terminos1","oneOf","terminos2","getValidationClass","touched","error","formik","useFormik","enableReinitialize","initialValues","tipoDocumento","onSubmit","values","startTransition","state","message","handleSubmit","Card","Body","_jsxs","Form","Group","controlId","Select","name","onChange","handleChange","onBlur","handleBlur","errors","Control","maxLength","Feedback","placeholder","Check","label","checked","disabled","onClick","e","preventDefault","Auth","_Fragment","src","imgLogo","alt"],"sourceRoot":""}